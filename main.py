import aiogram.utils.exceptions

from aiogram import types, Dispatcher, executor, Bot
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio
import json
import random
import time
import kb




philosophy_arr = [
    "–Ø —Å—á–∏—Ç–∞–ª, —á—Ç–æ –∂–∏—Ç—å –æ–∑–Ω–∞—á–∞–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∞–±—Å—É—Ä–¥, –±—É–Ω—Ç–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ. <b>–Ø –∏–∑–≤–ª–µ–∫–∞—é –∏–∑ –∞–±—Å—É—Ä–¥–∞ —Ç—Ä–∏ —Å–ª–µ–¥—Å—Ç–≤–∏—è ‚Äî –º–æ–π –±—É–Ω—Ç, –º–æ—é —Å–≤–æ–±–æ–¥—É –∏ –º–æ—é —Å—Ç—Ä–∞—Å—Ç—å. –ü–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –æ–¥–Ω–æ–π —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç—ã —É–º–∞ —è –æ–±—Ä–∞—â–∞—é –≤ –ø—Ä–∞–≤–∏–ª–æ –∂–∏–∑–Ω–∏ —Ç–æ, —á—Ç–æ –±—ã–ª–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –∫ —Å–º–µ—Ä—Ç–∏, ‚Äî –∏ –æ—Ç–≤–µ—Ä–≥–∞—é —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ</b>",
    "–Ø –¥—É–º–∞—é, —á–µ–ª–æ–≤–µ–∫ –∏–º–µ–µ—Ç –≤—ã–±–æ—Ä: –ª–∏–±–æ –∂–∏—Ç—å –≤ —Å–≤–æ–µ–º –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–∏—Å–ø–æ—Å–∞–±–ª–∏–≤–∞—è—Å—å –∫ –Ω–µ–º—É, –ª–∏–±–æ –ø—ã—Ç–∞—Ç—å—Å—è –≤–æ–∑–≤—ã—Å–∏—Ç—å—Å—è –Ω–∞–¥ –Ω–∏–º, –Ω–æ –º–æ–∂–Ω–æ –∏ –≤—Å—Ç—É–ø–∏—Ç—å —Å –Ω–∏–º –≤ —Å–¥–µ–ª–∫—É: <b>–∂–∏—Ç—å –≤ —Å–≤–æ–µ–º –≤–µ–∫–µ –∏ –≤–µ—Ä–æ–≤–∞—Ç—å –≤ –≤–µ—á–Ω–æ–µ</b>. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –º–Ω–µ –Ω–µ –∏–º–ø–æ–Ω–∏—Ä—É–µ—Ç. –Ø —Å—á–∏—Ç–∞—é, —á—Ç–æ –æ—Ç –∞–±—Å—É—Ä–¥–∞ –º–æ–∂–Ω–æ –∑–∞—Å–ª–æ–Ω–∏—Ç—å—Å—è –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ–º –≤ –≤–µ—á–Ω–æ–µ, —Å–ø–∞—Å—Ç–∏—Å—å –±–µ–≥—Å—Ç–≤–æ–º –≤ –∏–ª–ª—é–∑–∏–∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –∫–∞–∫–æ–π-—Ç–æ –∏–¥–µ–µ. –ò–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —Å–Ω–∏–∑–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ –∞–±—Å—É—Ä–¥–∞ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –º—ã—à–ª–µ–Ω–∏—è.",
    "–õ—é–¥–µ–π, –ø—ã—Ç–∞—é—â–∏—Ö—Å—è –≤–æ–∑–≤—ã—Å–∏—Ç—å—Å—è –Ω–∞–¥ –∞–±—Å—É—Ä–¥–æ–º, —è –Ω–∞–∑—ã–≤–∞—é –∑–∞–≤–æ–µ–≤–∞—Ç–µ–ª—è–º–∏. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—Ü—ã –ª—é–¥–µ–π-–∑–∞–≤–æ–µ–≤–∞—Ç–µ–ª–µ–π —è –Ω–∞—Ö–æ–¥–∏–ª –≤ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è—Ö —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è –ê. –ú–∞–ª—å—Ä–æ. –î—É–º–∞—é, –∑–∞–≤–æ–µ–≤–∞—Ç–µ–ª—å –±–æ–≥–æ–ø–æ–¥–æ–±–µ–Ω, <b>–æ–Ω –∑–Ω–∞–µ—Ç —Å–≤–æ–µ —Ä–∞–±—Å—Ç–≤–æ –∏ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ—Ç —ç—Ç–æ–≥–æ</b>, –ø—É—Ç—å –µ–≥–æ –∫ —Å–≤–æ–±–æ–¥–µ –æ—Å–≤–µ—â–∞–µ—Ç –∑–Ω–∞–Ω–∏–µ. <b>–ó–∞–≤–æ–µ–≤–∞—Ç–µ–ª—å ‚Äî —ç—Ç–æ –∏–¥–µ–∞–ª —á–µ–ª–æ–≤–µ–∫–∞, –Ω–æ –±—ã—Ç—å —Ç–∞–∫–æ–≤—ã–º ‚Äî —ç—Ç–æ —É–¥–µ–ª –Ω–µ–º–Ω–æ–≥–∏—Ö</b>.",
    "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –±—É–Ω—Ç ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Ç–∏–≤–æ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∞ –≤–ø–æ–ª–Ω–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ–µ. <b>–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∂–∏—Ç—å, —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –±—É–Ω—Ç–æ–≤–∞—Ç—å </b>, –Ω–æ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –Ω–∞–¥–æ, –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—è—Å—å –æ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–¥–≤–∏–Ω—É—Ç—ã—Ö –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã—Ö —Ü–µ–ª–µ–π. –í –æ–ø—ã—Ç–µ –∞–±—Å—É—Ä–¥–∞ —Å—Ç—Ä–∞–¥–∞–Ω–∏–µ –∏–º–µ–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –≤ –±—É–Ω—Ç–∞—Ä—Å–∫–æ–º –∂–µ –ø–æ—Ä—ã–≤–µ –æ–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–º. –ü—Ä–∏—á–µ–º <b>–∑–ª–æ, –∏—Å–ø—ã—Ç–∞–Ω–Ω–æ–µ –æ–¥–Ω–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º, —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á—É–º–æ–π, –∑–∞—Ä–∞–∑–∏–≤—à–µ–π –≤—Å–µ—Ö</b>.",
    "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, <b>–≤ —ç—Ç–æ–º –º–∏—Ä–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç, –æ–¥–∏–Ω –∑–∞–∫–æ–Ω ‚Äî –∑–∞–∫–æ–Ω —Å–∏–ª—ã, –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç—Å—è –æ–Ω –≤–æ–ª–µ–π –∫ –≤–ª–∞—Å—Ç–∏</b>, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –Ω–∞—Å–∏–ª–∏—è.",
    "–Ø –ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—á–∞—Å—Ç—å—è –±–æ–≥–∞—Ç—Å—Ç–≤–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –û–Ω –±—ã–ª –ø—Ä–æ—Ç–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å—á–∞—Å—Ç—å—è –ø—É—Ç–µ–º –ø—Ä–∏–Ω–µ—Å–µ–Ω–∏—è –Ω–µ—Å—á–∞—Å—Ç—å—è –¥—Ä—É–≥–∏–º. <b>–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –∑–∞—Å–ª—É–≥–∞ —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ–±—ã –∂–∏—Ç—å –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ –∏ –±–µ–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç–∏</b>",
    "–Ø —Å—á–∏—Ç–∞—é –±—É—Ä–∂—É–∞–∑–Ω—É—é —Å–≤–æ–±–æ–¥—É –≤—ã–¥—É–º–∫–æ–π. <b>–°–≤–æ–±–æ–¥–∞ ‚Äî –¥–µ–ª–æ —É–≥–Ω–µ—Ç–µ–Ω–Ω—ã—Ö, –∏ –µ–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∞–º–∏ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏ –≤—ã—Ö–æ–¥—Ü—ã –∏–∑ –ø—Ä–∏—Ç–µ—Å–Ω—è–µ–º–æ–≥–æ –Ω–∞—Ä–æ–¥–∞</b>.",
    "–§–æ—Ä–º—É–ª–∏—Ä—É—è —Å–≤–æ—é –Ω—Ä–∞–≤—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, —è –ø–∏—Å–∞–ª –≤ <b>–ó–∞–ø–∏—Å–Ω—ã—Ö –∫–Ω–∏–∂–∫–∞—Ö</b>: <b>–ú—ã –¥–æ–ª–∂–Ω—ã —Å–ª—É–∂–∏—Ç—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ —É—Å—Ç—Ä–æ–µ–Ω–æ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ, –¥–æ–ª–∂–Ω—ã —É–º–Ω–æ–∂–∞—Ç—å –≤–∑—Ä–∞—â–∏–≤–∞—Ç—å —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –º–∏—Ä –Ω–∞—à –Ω–µ—Å—á–∞—Å—Ç–µ–Ω</b>."
]
books = []
with open("json_libs/books_info.json", "r") as f:
    file_add = json.load(f)
    for i in file_add:
        books.append(i)

bot = Bot(token='5278938017:AAEgs0BuKmQlA3sgOVQk9Wpqx7IAoHsw7Wk')
dp = Dispatcher(bot, storage=MemoryStorage())

class States(StatesGroup):
    MainState = State()

@dp.message_handler(commands=["start"])
async def start(msg: types.Message, state: FSMContext):
    await state.set_state(States.MainState.state)
    await msg.delete()
    main_mess = await bot.send_message(msg.from_user.id, "<i>–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–µ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏.</i>", parse_mode="HTML")
    await bot.send_message(msg.from_user.id, parse_mode="HTML",
                           text=f"<i>üñêüëÅüëÉüëÅ\n –ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}, —è <b>–ê–ª—å–±–µ—Ä –ö–∞–º—é</b>! –ß—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å?</i> ",
                           reply_markup=kb.main)
    async with state.proxy() as data:
        data["id"] = msg.from_user.id
        with open("json_libs/ids.json", "r") as f:
            file_ids = json.load(f)
        with open("json_libs/ids.json", "w") as f:
            if str(data["id"]) not in file_ids:
                file_ids[data["id"]] = main_mess["message_id"]
            json.dump(file_ids, f)


@dp.callback_query_handler(text="books", state=States.MainState.state)
async def push(call: types.CallbackQuery):
    rand = random.choice(books)
    with open("json_libs/books_info.json", "r") as f:
        file_book = json.load(f)
        try:
            await call.message.edit_text(f"<b>{rand}</b>\n\n\n<a href='{file_book[rand]}'>–ü–µ—Ä–µ–π—Ç–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫</a>", parse_mode="HTML", reply_markup=kb.books)
        except aiogram.utils.exceptions.MessageNotModified:
            pass


@dp.callback_query_handler(text="about", state=States.MainState.state)
async def about(call: types.CallbackQuery):
    await call.message.edit_text("<i>–Ø —Ä–æ–¥–∏–ª—Å—è <b>7 –Ω–æ—è–±—Ä—è 1913</b> –≥–æ–¥–∞ –≤ –ê–ª–∂–∏—Ä–µ, –Ω–∞ —Ñ–µ—Ä–º–µ ¬´–°–∞–Ω-–ü–æ–ª—å¬ª. –ú–æ–π –æ—Ç–µ—Ü, –õ—é—Å—å–µ–Ω –ö–∞–º—é, –≤–æ –≤—Ä–µ–º—è –ü–µ—Ä–≤–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω—ã –±—ã–ª —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ —Ä–∞–Ω–µ–Ω. –ú–æ—è –º–∞—Ç—å, –ö—É—Ç—Ä–∏–Ω –°–∞–Ω—Ç—ç, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –∏—Å–ø–∞–Ω–∫–æ–π, –ø–æ–ª—É–≥–ª—É—Ö–∞—è –∏ –Ω–µ–≥—Ä–∞–º–æ—Ç–Ω–∞—è, –≤–º–µ—Å—Ç–µ —Å –¥–µ—Ç—å–º–∏ –ø–µ—Ä–µ–µ—Ö–∞–ª–∞ –≤ –ê–ª–∂–∏—Ä. –ñ–∏–ª–∏ –æ—á–µ–Ω—å –±–µ–¥–Ω–æ. –ú–∞—Ç—å, —á—Ç–æ–±—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ–º—å—é, —Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–∞ —Ñ–∞–±—Ä–∏–∫–µ, —É–±–æ—Ä—â–∏—Ü–µ–π."
                                 "\n–° <b>1918</b> –ø–æ <b>1923</b> –≥–æ–¥—ã —è —É—á–∏–ª—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —à–∫–æ–ª–µ –∏ –∑–∞–∫–æ–Ω—á–∏–ª –µ–µ —Å –æ—Ç–ª–∏—á–∏–µ–º. "
                                 "\n–° <b>1932</b> –ø–æ <b>1937</b> –≥–æ–¥—ã —è –±—ã–ª —Å—Ç—É–¥–µ–Ω—Ç–æ–º –ê–ª–∂–∏—Ä—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –í <b>1937</b> –≥–æ–¥—É –≤—ã—à–µ–ª –º–æ–π –ø–µ—Ä–≤—ã–π —Å–±–æ—Ä–Ω–∏–∫ ¬´–ò–∑–Ω–∞–Ω–∫–∞ –∏ –ª–∏—Ü–æ¬ª."
                                 "\n–ö–æ–≥–¥–∞ —è –∑–∞–∫–æ–Ω—á–∏–ª –æ–±—É—á–µ–Ω–∏–µ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ, –≤–æ–∑–≥–ª–∞–≤–ª—è—è –ê–ª–∂–∏—Ä—Å–∫–∏–π –¥–æ–º –∫—É–ª—å—Ç—É—Ä—ã, –º—ã –≤–º–µ—Å—Ç–µ —Å –±—É–¥—É—â–µ–π –∂–µ–Ω–æ–π –§—Ä–∞–Ω—Å–∏–Ω –§–æ—Ä –ø–µ—Ä–µ–µ—Ö–∞–ª–∏ –≤ –û—Ä–∞–Ω –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–ª–∏ —Ç–∞–º —á–∞—Å—Ç–Ω—ã–µ —É—Ä–æ–∫–∏. –ü–æ–∑–∂–µ –ø–µ—Ä–µ–µ—Ö–∞–ª–∏ –≤ –ü–∞—Ä–∏–∂."
                                 "\n–í <b>1940</b> –≥–æ–¥—É –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É –ø–æ –ø—å–µ—Å–µ ¬´–ü–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π¬ª. –ê –≤ –¥–µ–∫–∞–±—Ä–µ –º–µ–Ω—è —É–≤–æ–ª–∏–ª–∏ –∏–∑ ¬´–ü–∞—Ä–∏-—Å—É–∞—Ä¬ª. –Ø –≤–µ—Ä–Ω—É–ª—Å—è –≤ –û—Ä–∞–Ω, —Ç–∞–º —É—á–∏–ª –¥–µ—Ç–µ–π —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º—É —è–∑—ã–∫—É –≤ —à–∫–æ–ª–µ."
                                 "\n–í <b>1942</b> –≥–æ–¥—É –≤—ã—Ö–æ–¥–∏—Ç ¬´–ü–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π¬ª. –° <b>1943</b> –≥–æ–¥–∞ –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è –≤ –≥–∞–∑–µ—Ç–µ ¬´–ö–æ–º–±–∞¬ª, –ø–æ–∑–∂–µ –∑–∞–Ω–∏–º–∞—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞. –í <b>1944</b> –≥–æ–¥—É –∑–∞–∫–æ–Ω—á–µ–Ω —Ä–æ–º–∞–Ω ¬´–ß—É–º–∞¬ª, –µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ <b>3</b> –≥–æ–¥–∞."
                                 "\n–í <b>1956</b> –≥–æ–¥—É —è –Ω–∞–ø–∏—Å–∞–ª —Ä–∞—Å—Å–∫–∞–∑ ¬´–ü–∞–¥–µ–Ω–∏–µ¬ª, –∞ —á–µ—Ä–µ–∑ –≥–æ–¥ –≤—ã—à–µ–ª —Å–±–æ—Ä–Ω–∏–∫ ¬´–ò–∑–≥–Ω–∞–Ω–∏–µ –∏ —Ü–∞—Ä—Å—Ç–≤–æ¬ª. –í <b>1957</b> –≥–æ–¥—É –ø–æ–ª—É—á–∏–ª –ù–æ–±–µ–ª–µ–≤—Å–∫—É—é –ø—Ä–µ–º–∏—é.</i>", parse_mode="HTML",reply_markup=kb.about)

@dp.callback_query_handler(text="back", state=States.MainState.state)
async def back(call: types.CallbackQuery):
    await call.message.edit_text(parse_mode="HTML",
                           text=f"<i>üñêüëÅüëÉüëÅ\n –ü—Ä–∏–≤–µ—Ç, {call.from_user.first_name}, —è <b>–ê–ª—å–±–µ—Ä –ö–∞–º—é</b>! –ß—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å?</i> ",
                           reply_markup=kb.main)


@dp.message_handler()
async def default(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await msg.delete()
        data["mess"] = await bot.send_message(data["id"], "<i>–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å.</i>", parse_mode="HTML")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=msg.from_user.id, message_id=data["mess"]["message_id"])


async def philosophy():
    while True:
        with open("json_libs/ids.json", "r") as f:
            file_ph = json.load(f)
            for li in file_ph:
                try:
                    await bot.edit_message_text(chat_id=int(li), message_id=file_ph[li], text=f"<i><b>–ú–æ—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è</b>:\n{random.choice(philosophy_arr)}</i>", parse_mode="HTML")
                except aiogram.utils.exceptions.MessageNotModified:
                    pass
        await asyncio.sleep(20)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(philosophy())
    executor.start_polling(dp, skip_updates=True)
